<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.GamePad = array_create(12); //Array to handle gamepad/controllers
global.ControllerCount = 0; //Variable to track how many controllers are connected
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gp0 = 0;
var gp1 = 0;
var gp2 = 0;
var gp3 = 0;
var gp4 = 0;
var gp5 = 0;
var gp6 = 0;
var gp7 = 0;
var gp8 = 0;
var gp9 = 0;
var gp10 = 0;
var gp11 = 0;
var gp12 = 0;
var global.ControllerCount = 0;

if (gamepad_is_connected(0))
{
    gp0 = 1;
}
else
{
    gp0 = 0;
}

if (gamepad_is_connected(1))
{
    gp1 = 1;
}
else
{
    gp1 = 0;
}

if (gamepad_is_connected(2))
{
    gp2 = 1;
}
else
{
    gp2 = 0;
}

if (gamepad_is_connected(3))
{
    gp3 = 1;
}
else
{
    gp3 = 0;
}

if (gamepad_is_connected(4))
{
    gp4 = 1;
}
else
{
    gp4 = 0;
}

if (gamepad_is_connected(5))
{
    gp5 = 1;
}
else
{
    gp5 = 0;
}

if (gamepad_is_connected(6))
{
    gp6 = 1;
}
else
{
    gp6 = 0;
}

if (gamepad_is_connected(7))
{
    gp7 = 1;
}
else
{
    gp7 = 0;
}

if (gamepad_is_connected(8))
{
    gp8 = 1;
}
else
{
    gp8 = 0;
}

if (gamepad_is_connected(9))
{
    gp9 = 1;
}
else
{
    gp9 = 0;
}

if (gamepad_is_connected(10))
{
    gp10 = 1;
}
else
{
    gp10 = 0;
}

if (gamepad_is_connected(11))
{
    gp11 = 1;
}
else
{
    gp11 = 0;
}

if (gamepad_is_connected(12))
{
    gp12 = 1;
}
else
{
    gp12 = 0;
}

//removed PS4 Slots BUG not allowing to have the controller vibrate so use DS4Windows to allow it to work properly and connect as a "Xinput gamepad"
//global.ControllerCount = gp4 + gp5 + gp6 + gp7 + gp8 + gp9 + gp10 + gp11 + gp12;
//global.ControllerCount = gp0 + gp1 + gp2 + gp3 + gp8 + gp9 + gp10 + gp11 + gp12;
global.ControllerCount = gp0 + gp1 + gp2 + gp3;

show_debug_message(string(global.ControllerCount));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
    case "gamepad discovered":                     // A game pad has been discovered
    
        var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
        gamepad_set_axis_deadzone(pad, 0.5);       // Set the "deadzone" for the axis
        gamepad_set_button_threshold(pad, 0.1);    // Set the "threshold" for the triggers 
        
        global.GamePad[pad] = "Connected";
        
    break;
        
        
    case "gamepad lost":                           // global.Gamepad has been removed or otherwise disabled
    
        var pad = async_load[? "pad_index"];       // Get the pad index
        
        global.GamePad[pad] = "Disconnected";
        
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
