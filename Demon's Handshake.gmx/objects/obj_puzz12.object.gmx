<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//increases when a 'obj_P_exclaim' is created
global.playercount = 0;

//set player check variables
player1 = false;
player2 = false;
player3 = false;
player4 = false;

gun = false;
plate = false;

instance_create(obj_puzz12.x+102,obj_puzz12.y+68,obj_skeet_gun);
instance_create(obj_puzz12.x+62,obj_puzz12.y+68,obj_skeet_plates);







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GameControls(obj_puzz4); //&lt;-----Initiate controller controls

// CHECK WHICH PLAYERS ARE IN THE ROOM
if instance_exists(obj_player1)
{
    player1=true;
}
if instance_exists(obj_player2)
{
    player2=true;
}
if instance_exists(obj_player3)
{
    player3=true;
}
if instance_exists(obj_player4)
{
    player4=true;
}

//player 1
if gun = true &amp;&amp; obj_player1.key_action_press
{
    instance_create(obj_skeet_gun.x+3,obj_skeet_gun.y-10,obj_skeet_bullet);
    obj_skeet_gun.sprite_index = spr_skeet_gun_fire;
}


if plate = true &amp;&amp; obj_player1.key_action_press
{
    instance_create(obj_puzz12.x,obj_puzz12.y,obj_skeet_target);
}

/*
//player 1
if chain = true &amp;&amp; obj_player1.key_action &amp;&amp; solved = false
{
    obj_chain.x = obj_player1.x
    if obj_chain.x &lt;= obj_puzz10.x+104 {obj_chain.x = obj_puzz10.x+105;}
        if obj_chain.x &gt;= obj_puzz10.x+139 {obj_chain.x = obj_puzz10.x+138;}
    if obj_player1.facing = 'right' {obj_chain.sprite_index = spr_chain_right}
    if obj_player1.facing = 'left' {obj_chain.sprite_index = spr_chain_left}
}
else

{
    if solved = false {obj_chain.sprite_index = spr_chain}
    if solved = true {obj_chain.sprite_index = spr_chain_up}
    
}

//player 2
if chain2 = true &amp;&amp; obj_player2.key_action &amp;&amp; solved = false
{
    obj_chain.x = obj_player2.x
    if obj_chain.x &lt;= obj_puzz10.x+104 {obj_chain.x = obj_puzz10.x+105;}
        if obj_chain.x &gt;= obj_puzz10.x+139 {obj_chain.x = obj_puzz10.x+138;}
    if obj_player2.facing = 'right' {obj_chain.sprite_index = spr_chain_right}
    if obj_player2.facing = 'left' {obj_chain.sprite_index = spr_chain_left}
}
else

{
    if solved = false {obj_chain.sprite_index = spr_chain}
    if solved = true {obj_chain.sprite_index = spr_chain_up}
    
}

//player 2
if chain3 = true &amp;&amp; obj_player3.key_action &amp;&amp; solved = false
{
    obj_chain.x = obj_player3.x
    if obj_chain.x &lt;= obj_puzz10.x+104 {obj_chain.x = obj_puzz10.x+105;}
        if obj_chain.x &gt;= obj_puzz10.x+139 {obj_chain.x = obj_puzz10.x+138;}
    if obj_player3.facing = 'right' {obj_chain.sprite_index = spr_chain_right}
    if obj_player3.facing = 'left' {obj_chain.sprite_index = spr_chain_left}
}
else

{
    if solved = false {obj_chain.sprite_index = spr_chain}
    if solved = true {obj_chain.sprite_index = spr_chain_up}
    
}

//player 4
if chain4 = true &amp;&amp; obj_player4.key_action &amp;&amp; solved = false
{
    obj_chain.x = obj_player4.x
    if obj_chain.x &lt;= obj_puzz10.x+104 {obj_chain.x = obj_puzz10.x+105;}
        if obj_chain.x &gt;= obj_puzz10.x+139 {obj_chain.x = obj_puzz10.x+138;}
    if obj_player4.facing = 'right' {obj_chain.sprite_index = spr_chain_right}
    if obj_player4.facing = 'left' {obj_chain.sprite_index = spr_chain_left}
}
else

{
    if solved = false {obj_chain.sprite_index = spr_chain}
    if solved = true {obj_chain.sprite_index = spr_chain_up}
    
}

if obj_chain.x = obj_puzz10.x+138
{
    solved = true;
}

if solved = true &amp;&amp; key_created = false
{
    instance_create(obj_chain.x,obj_chain.y+50,obj_great_key);
    key_created = true;
}

/*
if crate = true &amp;&amp; hole = true &amp;&amp; obj_player1.key_action_press &amp;&amp; obj_player1.facing = 'left' 
{
    obj_crate.x-=2;
}
//player 2
if crate2 = true &amp;&amp; hole = true &amp;&amp; obj_player2.key_action_press &amp;&amp; obj_player2.facing = 'right' 
{
    obj_crate.x+=2;
}

if crate2 = true &amp;&amp; hole = true &amp;&amp; obj_player2.key_action_press &amp;&amp; obj_player2.facing = 'left' 
{
    obj_crate.x-=2;
}

//player 3
if crate3 = true &amp;&amp; hole = true &amp;&amp; obj_player3.key_action_press &amp;&amp; obj_player3.facing = 'right' 
{
    obj_crate.x+=2;
}

if crate3 = true &amp;&amp; hole = true &amp;&amp; obj_player3.key_action_press &amp;&amp; obj_player3.facing = 'left' 
{
    obj_crate.x-=2;
}

//player 4
if crate4 = true &amp;&amp; hole = true &amp;&amp; obj_player4.key_action_press &amp;&amp; obj_player4.facing = 'right' 
{
    obj_crate.x+=2;
}

if crate4 = true &amp;&amp; hole = true &amp;&amp; obj_player4.key_action_press &amp;&amp; obj_player4.facing = 'left' 
{
    obj_crate.x-=2;
}
//key create
if key_created = false &amp;&amp; hole = false
{
    instance_create(obj_floorhole.x,obj_floorhole.y,obj_key);
    key_created = true;
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
